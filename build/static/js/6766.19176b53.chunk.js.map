{"version":3,"file":"static/js/6766.19176b53.chunk.js","mappings":"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","sources":["views/exam/Exam.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { FaEdit, FaTrash, FaEye } from \"react-icons/fa\";\nimport {\n    CButton,\n    CCol,\n    CForm,\n    CFormInput,\n    CFormFeedback,\n    CFormLabel,\n    CFormSelect,\n} from \"@coreui/react\";\nimport DataTable from \"../ownComponent/DataTable\";\nimport FormsCustom from \"../ownComponent/FormsCustom\";\nimport {\n    renderOrganizationData,\n    renderTeacherData,\n    addExam,\n    editExam,\n    deleteExamData,\n    renderExamData,\n    renderLevelData,\n    renderTeacherByOrganization,\n    renderExamDataByOrganization,\n    renderExamByStudentId\n} from \"src/utility/api\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport PropTypes from \"prop-types\";\nimport Swal from \"sweetalert2\";\nimport Select from \"react-select\";\nimport Cookies from 'js-cookie'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useNavigate } from 'react-router-dom'\n\nfunction Exam(props) {\n\n    const orgId = Cookies.get(\"organizationId\");\n    const studentId = Cookies.get(\"adminId\");\n\n\n    // all useState\n    const [data, setData] = useState([]);\n    const [editId, setEditId] = useState(null);\n    const [btnText, setBtnText] = useState(\"Add Examination\");\n    const [isTypeSelected, setIsTypeSelected] = useState(false);\n    const [isTypeSelectedOrganization, setIsTypeSelectedOrganization] = useState(false);\n    const [isTypeSelectedLevel, setIsTypeSelectedLevel] = useState(false);\n    const [organization_option, setOrganizationOption] = useState([]);\n    const [level_option, setLevelOption] = useState([]);\n    const [teacher_option, setTeacherOption] = useState([]);\n    const [isTypeSelectedTeacher, setIsTypeSelectedTeacher] = useState(false);\n    const [isTeacherDisabled, setIsTeacherDisabled] = useState(true);\n    const [isOrgDisabled, setIsOrgDisabled] = useState(false);\n    const [isExamDisabled, setIsExamDisabled] = useState(true);\n\n\n\n\n    const navigate = useNavigate()\n    const created_by = Cookies.get('adminId')\n\n    const [formData, setFormData] = useState({\n        exam_name: \"\",\n        total_marks: \"\",\n        organization_id: orgId,\n        level_id: \"\",\n        created_by: created_by,\n        organization_value: null,\n        organization_id: orgId,\n        level_value: null,\n        level_id: null,\n        examDateTime: null,\n        examEndDateTime: null,\n        teacher_value: null,\n        teacher_id: null,\n        exam_duration: null,\n        duration_value: null\n\n    });\n\n    useEffect(() => {\n        renderData();\n\n    }, []);\n\n\n\n\n    // render data\n    const renderData = async () => {\n        const obj = {\n            \"student_id\": studentId,\n            \"type\": \"upcoming\"\n        }\n        const response = await renderExamByStudentId(obj);\n        if (response.success) {\n            setData(response.data);\n        }\n    };\n\n    // render organization\n    const renderOrganization = async () => {\n        const response = await renderOrganizationData();\n        console.log(response);\n        if (response.success) {\n            response.data.map((org) => {\n                org.label = org.name;\n                org.value = org._id;\n            });\n            setOrganizationOption(response.data);\n        }\n    };\n\n    // render level\n    const renderLevel = async () => {\n\n        const response = await renderLevelData();\n        console.log(response);\n        if (response.success) {\n            response.data.map((org) => {\n                org.label = org.name;\n                org.value = org._id;\n            });\n            setLevelOption(response.data);\n        }\n    };\n    const renderTeacherData = async (id) => {\n        const response = await renderTeacherByOrganization(orgId);\n        console.log(response);\n        if (response.success) {\n            response.data.map((org) => {\n                org.label = org.name;\n                org.value = org._id;\n            });\n            setTeacherOption(response.data);\n        }\n    }\n\n    //edit Student\n    const handleEdit = (id) => {\n        setBtnText(\"Update Examination\");\n        const studentToUpdate = data.find((org) => org._id === id);\n        console.log(studentToUpdate);\n\n        // Extract date and time from examDateTime \n        const examDateTime = new Date(studentToUpdate.examDateTime);\n        const examEndDateTime = new Date(studentToUpdate.examEndDateTime);\n\n\n        setEditId(studentToUpdate._id);\n        setIsTeacherDisabled(false);\n        setIsOrgDisabled(true);\n        setFormData({\n            exam_name: studentToUpdate.exam_name,\n            total_marks: studentToUpdate.total_marks,\n            organization_value: {\n                value: studentToUpdate.organization_id._id,\n                label: studentToUpdate.organization_id.name,\n            },\n            organization_id: studentToUpdate.organization_id._id,\n            level_value: {\n                value: studentToUpdate.level_id._id,\n                label: studentToUpdate.level_id.name,\n            },\n            level_id: studentToUpdate.level_id._id,\n            duration_value: {\n                value: studentToUpdate.exam_duration,\n                label: studentToUpdate.exam_duration,\n            },\n            exam_duration: studentToUpdate.exam_duration,\n\n            teacher_value: {\n                value: studentToUpdate.teacher_id._id,\n                label: studentToUpdate.teacher_id.name,\n            },\n            teacher_id: studentToUpdate.teacher_id._id,\n            examDateTime: examDateTime,\n            examEndDateTime: examEndDateTime\n        });\n    };\n\n\n    // Delete Exam\n    const handleDelete = async (id) => {\n        const confirmDelete = await Swal.fire({\n            title: \"Are you sure?\",\n            text: \"You will not be able to recover this student!\",\n            icon: \"warning\",\n            showCancelButton: true,\n            confirmButtonColor: \"#d33\",\n            cancelButtonColor: \"#3085d6\",\n            confirmButtonText: \"Yes, delete it!\",\n        });\n\n        if (confirmDelete.isConfirmed) {\n            try {\n                const response = await deleteExamData(id);\n                if (response.success) {\n                    toast.success(response.message, {\n                        position: toast.POSITION.TOP_RIGHT,\n                        autoClose: 3000,\n                    });\n                    renderData();\n                }\n            } catch (error) {\n                toast.error(error.message, {\n                    position: toast.POSITION.TOP_RIGHT,\n                    autoClose: 3000,\n                });\n            }\n        }\n    };\n\n    // handleExamView\n    const handleExamView = async (data, type) => {\n\n        if(type === \"final\"){\n            Cookies.set(\"examType\", \"e\", { secure: true, sameSite: 'strict' })\n        }else{\n            Cookies.set(\"examType\", \"t\", { secure: true, sameSite: 'strict' })\n        }\n        let id = data._id\n        let id1 = data.exam_id._id\n        navigate(`/exam/${id}/${id1}`);\n    }\n\n    const columns = [\n        { Header: \"Exam Name\", accessor: \"exam_id.exam_name\" },\n        { Header: \"Level Name\", accessor: \"exam_id.level_id.name\" },\n        { Header: \"Incharge Teacher\", accessor: \"exam_id.teacher_id.name\" },\n        { Header: \"Exam Duration\", accessor: \"exam_id.exam_duration\" },\n        { Header: \"Total Marks\", accessor: \"exam_id.total_marks\" },\n\n\n        {\n            Header: \"Exam Start Date & Time\",\n            accessor: \"exam_id.examDateTime\",\n            Cell: ({ value }) => {\n                // Format the date\n                const formattedDate = new Date(value).toLocaleDateString(\"en-GB\", {\n                    day: \"numeric\",\n                    month: \"short\",\n                    year: \"numeric\",\n                });\n\n                // Format the time\n                const formattedTime = new Date(value).toLocaleTimeString(\"en-US\", {\n                    hour: \"numeric\",\n                    minute: \"numeric\",\n                    hour12: true,\n                });\n\n                return `${formattedDate} ${formattedTime}`;\n            },\n        },\n        {\n            Header: \"Exam End Date & Time\",\n            accessor: \"exam_id.examEndDateTime\",\n            Cell: ({ value }) => {\n                // Format the date\n                const formattedDate = new Date(value).toLocaleDateString(\"en-GB\", {\n                    day: \"numeric\",\n                    month: \"short\",\n                    year: \"numeric\",\n                });\n\n                // Format the time\n                const formattedTime = new Date(value).toLocaleTimeString(\"en-US\", {\n                    hour: \"numeric\",\n                    minute: \"numeric\",\n                    hour12: true,\n                });\n\n                return `${formattedDate} ${formattedTime}`;\n            },\n        },\n        {\n            Header: \"Exam Status\",\n            accessor: \"is_completed\",\n            Cell: ({ value }) => (\n                <CButton\n                    color={value ? \"success\" : \"danger\"}\n                    size=\"sm\"\n                    style={{ color: \"white\", borderRadius: \"20px\", minWidth: \"110px\" }} // Set a fixed width\n                >\n                    {value ? \"Completed\" : \"Not Completed\"}\n                </CButton>\n            ),\n        },\n\n        // {\n        //     Header: \"Actions\",\n        //     accessor: \"_id\", // Assuming you have an 'id' property in your teacher data\n        //     Cell: ({ row }) => (\n\n        //         <>\n\n        //             <CButton\n        //                 color=\"info\"\n        //                 size=\"sm\"\n        //                 style={{ color: \"white\" }}\n        //                 onClick={() => handleEdit(row.original._id)}\n        //             >\n        //                 <FaEdit /> Start Practice Exam\n        //             </CButton>{\" \"}\n\n\n\n        //             <CButton\n        //                 color=\"success\"\n        //                 size=\"sm\"\n        //                 style={{ color: \"white\" }}\n        //                 onClick={() => handleExamView(row.original._id)}\n\n        //             >\n        //                 <FaEdit /> Start Final Exam\n        //             </CButton>\n\n        //         </>\n        //     ),\n        // },\n\n        {\n            Header: \"Actions\",\n            accessor: \"_id\", // Assuming you have an 'id' property in your teacher data\n            Cell: ({ row }) => {\n                if (row.original.is_completed) {\n                    // return(\n                    //     <CButton\n                    //     color=\"success\"\n                    //     size=\"sm\"\n                    //     style={{ color: \"white\", width: \"-webkit-fill-available\", fontWeight: \"bold\" }}\n                    //     onClick={() => handleExamView(row.original,\"final\")}\n                    // >\n                    //     <FaEye /> See Result\n                    // </CButton>\n                    // )\n                    return \"-\"\n                } else {\n                    const { exam_id: { examDateTime, examEndDateTime } } = row.original;\n                    const currentDateTime = new Date();\n\n                    if (currentDateTime >= new Date(examDateTime) && currentDateTime <= new Date(examEndDateTime)) {\n                        return (\n                            <CButton\n                                color=\"success\"\n                                size=\"sm\"\n                                style={{ color: \"white\", width: \"-webkit-fill-available\" }}\n                                onClick={() => handleExamView(row.original, \"final\")}\n                            >\n                                <FaEdit /> Start Final Exam\n                            </CButton>\n                        );\n                    } else if (currentDateTime < new Date(examDateTime)) {\n                        return (\n                            <CButton\n                                color=\"info\"\n                                size=\"sm\"\n                                style={{ color: \"white\", width: \"-webkit-fill-available\" }}\n                                onClick={() => handleExamView(row.original, \"practice\")}\n                            >\n                                <FaEdit /> Start Practice Exam\n                            </CButton>\n                        );\n                    } else {\n                        return null; // Render nothing if neither condition is met\n                    }\n                }\n\n            },\n        },\n\n\n\n    ];\n\n    const CustomStyles = () => {\n        const formRef = useRef();\n\n        const handleChange = (e) => {\n            const { name, value, files } = e.target;\n\n            if (name === 'examDateTime' || name === 'examEndDateTime') {\n                setFormData((prevData) => ({\n                    ...prevData,\n                    [name]: new Date(value),\n                }));\n            } else {\n                setFormData((prevData) => ({\n                    ...prevData,\n                    [name]: name === \"file\" ? files[0] : value,\n                }));\n            }\n        };\n\n\n\n        const handleChangeSelectOrganization = (selectedOption) => {\n            console.log(selectedOption);\n            setFormData((prevData) => ({\n                ...prevData,\n                organization_value: selectedOption,\n                organization_id: selectedOption.value,\n            }));\n            renderTeacherData(selectedOption.value)\n            setIsTeacherDisabled(false)\n            setIsTypeSelectedOrganization(false);\n        };\n\n\n        //handleChangeSelectTeacher\n        const handleChangeSelectTeacher = (selectedOption) => {\n            console.log(selectedOption);\n            setFormData((prevData) => ({\n                ...prevData,\n                teacher_value: selectedOption,\n                teacher_id: selectedOption.value,\n            }));\n            setIsTypeSelectedTeacher(false);\n        };\n\n        // handleChangeSelectLevel\n        const handleChangeSelectLevel = (selectedOption) => {\n            console.log(selectedOption);\n            setFormData((prevData) => ({\n                ...prevData,\n                level_value: selectedOption,\n                level_id: selectedOption.value,\n            }));\n            setIsTypeSelectedLevel(false);\n        };\n\n        // Handler for duration change\n        const handleDurationChange = (selectedOption) => {\n            console.log(selectedOption);\n            setFormData((prevData) => ({\n                ...prevData,\n                duration_value: selectedOption,\n                exam_duration: selectedOption.value,\n            }));\n            // setIsTypeSelectedLevel(false);\n        };\n\n\n        const handleStartDateChange = (date) => {\n            setFormData((prevData) => ({ ...prevData, examDateTime: date }));\n        };\n\n        const handleEndDateChange = (date) => {\n            setFormData((prevData) => ({ ...prevData, examEndDateTime: date }));\n        };\n\n        const handleSubmit = async (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            const form = formRef.current;\n\n            if (form.checkValidity() === false) {\n                form.classList.add(\"was-validated\");\n                if (formData.level_id == \"\" || formData.level_id == null) {\n                    setIsTypeSelectedLevel(true);\n                    return;\n                } else if (\n                    formData.organization_id == \"\" ||\n                    formData.organization_id == null\n                ) {\n                    setIsTypeSelectedOrganization(true);\n                    return;\n                }\n                return;\n            }\n            formData.examDateTime = formData.examDateTime.toISOString();\n            formData.examEndDateTime = formData.examEndDateTime.toISOString();\n\n\n            let response = null;\n            formData.total_marks = parseInt(formData.total_marks)\n            console.log(formData);\n\n            //   return\n            if (editId) {\n                response = await editExam(editId, formData);\n            } else {\n                response = await addExam(formData);\n                setEditId(null);\n            }\n\n            if (response.success) {\n                toast.success(response.message, {\n                    position: toast.POSITION.TOP_RIGHT,\n                    autoClose: 3000,\n                });\n                renderData();\n\n                setBtnText(\"Add Teacher\");\n                setFormData({\n                    exam_name: \"\",\n                    total_marks: \"\",\n                    examDateTime: \"\",\n                    examEndDateTime: \"\",\n                    organization_value: null,\n                    organization_id: orgId,\n                    level_value: null,\n                    level_id: null,\n                    teacher_id: null,\n                    teacher_value: null,\n                    duration_value: null,\n                    exam_duration: null,\n                });\n\n                form.classList.remove(\"was-validated\");\n                setIsOrgDisabled(false);\n            } else {\n                toast.error(response.message, {\n                    position: toast.POSITION.TOP_RIGHT,\n                    autoClose: 3000,\n                });\n            }\n        };\n\n        return (\n            <CForm\n                ref={formRef}\n                className=\"row g-3 needs-validation\"\n                noValidate\n                onSubmit={handleSubmit}\n            >\n                <CCol md={4}>\n                    <CFormLabel>Examination Name</CFormLabel>\n                    <CFormInput\n                        type=\"text\"\n                        placeholder=\"Enter Examination Name\"\n                        name=\"exam_name\"\n                        required\n                        value={formData.exam_name}\n                        onChange={handleChange}\n                    />\n                    <CFormFeedback invalid>Please enter examination  name</CFormFeedback>\n                </CCol>\n                <CCol md={4}>\n                    <CFormLabel>Select Level</CFormLabel>\n                    <Select\n                        name=\"is_type\"\n                        value={formData.level_value}\n                        options={level_option}\n                        onChange={handleChangeSelectLevel}\n                        placeholder=\"Select Level\"\n                        required\n                    />\n                    <CFormFeedback className=\"text-danger\" style={{ fontSize: \"14px\" }}>\n                        {\" \"}\n                        {isTypeSelectedLevel ? \"Please select level\" : \"\"}\n                    </CFormFeedback>\n                </CCol>\n\n                {/* {!props.id ? <CCol md={4}>\n                    <CFormLabel>Select Organization</CFormLabel>\n                    <Select\n                        name=\"is_type\"\n                        value={formData.organization_value}\n                        options={organization_option}\n                        onChange={handleChangeSelectOrganization}\n                        placeholder=\"Select Type\"\n                        isDisabled={isOrgDisabled}\n                        required\n                    />\n                    <CFormFeedback className=\"text-danger\" style={{ fontSize: \"14px\" }}>\n                        {\" \"}\n                        {isTypeSelectedOrganization ? \"Please select organization\" : \"\"}\n                    </CFormFeedback>\n                </CCol> : null} */}\n\n\n                <CCol md={4}>\n                    <CFormLabel>Select Incharge Teacher</CFormLabel>\n                    <Select\n                        name=\"teacher_id\"\n                        value={formData.teacher_value}\n                        options={teacher_option}\n                        onChange={handleChangeSelectTeacher}\n                        placeholder=\"Select Teacher\"\n                        required\n                        isDisabled={isTeacherDisabled}\n                    />\n                    <CFormFeedback className=\"text-danger\" style={{ fontSize: \"14px\" }}>\n                        {\" \"}\n                        {isTypeSelectedTeacher ? \"Please select teacher\" : \"\"}\n                    </CFormFeedback>\n                </CCol>\n\n                <CCol md={4}>\n                    <CFormLabel>Select Examination Start Date and Time</CFormLabel>\n                    <div className=\"d-flex\">\n                        <DatePicker\n                            selected={formData.examDateTime}\n                            onChange={handleStartDateChange}\n                            showTimeSelect\n                            timeFormat=\"HH:mm\"\n                            timeIntervals={15}\n                            dateFormat=\"yyyy-MM-dd HH:mm:ss\"\n                            placeholderText=\"Select Examination Date and Time\"\n                            className=\"form-control\"\n                            required\n                            minDate={new Date()} // Set minimum date to today\n                            filterDate={(date) => {\n                                const currentDate = new Date();\n                                return date >= currentDate.setHours(0, 0, 0, 0); // Set current date to midnight\n                            }}\n                        />\n                    </div>\n                    <CFormFeedback invalid>Please select examination date and time</CFormFeedback>\n                </CCol>\n\n                <CCol md={4}>\n                    <CFormLabel>Select Examination End Date and Time</CFormLabel>\n                    <div className=\"d-flex\">\n                        <DatePicker\n                            selected={formData.examEndDateTime}\n                            onChange={handleEndDateChange}\n                            showTimeSelect\n                            timeFormat=\"HH:mm\"\n                            timeIntervals={15}\n                            dateFormat=\"yyyy-MM-dd HH:mm:ss\"\n                            placeholderText=\"Select Examination Date and Time\"\n                            className=\"form-control\"\n                            required\n                            minDate={formData.examDateTime} // Set minimum date to selected start date\n                            filterDate={(date) => {\n                                const currentDate = new Date();\n                                return date >= currentDate.setHours(0, 0, 0, 0); // Set current date to midnight\n                            }}\n                            filterTime={(time) => {\n                                const currentStartDate = formData.examDateTime || new Date();\n                                const selectedEndDate = formData.examEndDateTime || currentStartDate;\n\n                                // Check if the selected date is the same as the start date\n                                if (selectedEndDate.getDate() === currentStartDate.getDate() &&\n                                    selectedEndDate.getMonth() === currentStartDate.getMonth() &&\n                                    selectedEndDate.getFullYear() === currentStartDate.getFullYear()) {\n                                    // If the date is the same, make sure the selected time is greater than the start time\n                                    return time > currentStartDate;\n                                } else {\n                                    // If the date is different, allow any time on the selected end date\n                                    return true;\n                                }\n                            }}\n                        />\n                    </div>\n                    <CFormFeedback invalid>Please select examination date and time</CFormFeedback>\n                </CCol>\n\n                <CCol md={4}>\n                    <CFormLabel>Select Duration</CFormLabel>\n                    <Select\n                        name=\"exam_duration\"\n                        value={formData.duration_value}\n                        options={[\n                            { value: '1H', label: '1H' },\n                            // { value: '1.5 H', label: '1.5 H' },\n                            { value: '2H', label: '2H' },\n                            // { value: '2.5 H', label: '2.h H' },\n                            { value: '3H', label: '3H' },\n                            // { value: '3.5 H', label: '3.5 H' }\n\n                            // Add more options as needed\n                        ]}\n                        onChange={handleDurationChange}\n                        placeholder=\"Select Duration\"\n\n                    />\n\n                </CCol>\n\n                <CCol md={4}>\n                    <CFormLabel>Total Marks</CFormLabel>\n                    <CFormInput\n                        type=\"number\"\n                        placeholder=\"Enter total marks\"\n                        name=\"total_marks\"\n                        required\n                        value={formData.total_marks}\n                        onChange={handleChange}\n                    />\n                    <CFormFeedback invalid>Please enter total marks</CFormFeedback>\n                </CCol>\n\n                <CCol xs={12} className=\"d-flex justify-content-end\">\n                    <CButton color=\"primary\" type=\"submit\">\n                        {btnText}\n                    </CButton>\n                </CCol>\n            </CForm>\n        );\n    };\n\n    return (\n        <>\n            {/* <FormsCustom customStyles={CustomStyles} title=\"Examination Master\" /> */}\n            <DataTable columns={columns} data={data} name=\"Exam List\" />\n        </>\n    );\n}\n\nexport default Exam;\n\nExam.propTypes = {\n    row: PropTypes.shape({\n        original: PropTypes.shape({\n            _id: PropTypes.number.isRequired,\n        }),\n    }),\n};\n"],"names":["props","orgId","Cookies","get","studentId","data","setData","useState","editId","setEditId","btnText","setBtnText","isTypeSelected","setIsTypeSelected","isTypeSelectedOrganization","setIsTypeSelectedOrganization","isTypeSelectedLevel","setIsTypeSelectedLevel","organization_option","setOrganizationOption","level_option","setLevelOption","teacher_option","setTeacherOption","isTypeSelectedTeacher","setIsTypeSelectedTeacher","isTeacherDisabled","setIsTeacherDisabled","isOrgDisabled","setIsOrgDisabled","isExamDisabled","setIsExamDisabled","navigate","useNavigate","created_by","formData","setFormData","exam_name","total_marks","organization_id","level_id","organization_value","level_value","examDateTime","examEndDateTime","teacher_value","teacher_id","exam_duration","duration_value","useEffect","renderData","async","obj","response","renderExamByStudentId","success","handleExamView","type","set","secure","sameSite","id","_id","id1","exam_id","concat","columns","Header","accessor","Cell","_ref","value","formattedDate","Date","toLocaleDateString","day","month","year","formattedTime","toLocaleTimeString","hour","minute","hour12","_ref2","_ref3","_jsx","CButton","color","size","style","borderRadius","minWidth","children","_ref4","row","original","is_completed","currentDateTime","_jsxs","width","onClick","FaEdit","_Fragment","DataTable","name"],"sourceRoot":""}